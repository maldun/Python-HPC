.. highlight:: rst


Introduction
===============

This short documentation was written by me for the High Performance Computing Seminar
in the winter semester 2010/11 of Prof. G. Haase at the University Graz Austria.

Actually to learn Sphinx and to make it possible for other to get a quick and dirty reference
for working with Python in mathematics and scientific computing I started to write this tech report.

I started with Python last summer, after a short introduction to the *Sage* mathematics software. One could
say it was love at first sight. I was implementing some test code with krylov methods in Matlab and Octave that
time, and was annoyed by the lack of object oriented features like abstracting and capsuling. I had the problem, that
every time I implement a new numerical scheme I have to rewrite the code of my optimisations algorithms, or at least have 
to alter it, so that every time I need to retest the new implemtation, which costs time and nerves. And since I'm a
lazy person I didn't want to do that. 

I'm now implementing my thesis code in Python, and I also work as a Sage developer in my freetime, and try to help
improving the numerics, optimisations and symbolics parts of Sage which are my personal research interests.

The Python version used here is Python 2.6. since most of the current packages are not ported to Python 3.
But I try to make them compatible with the new version so that this document don't get outdated soon.

The aimed audience are mathematicians who want learn Python in a quick way to use it.

Stefan Reiterer, 
Graz Austria 
2011

  