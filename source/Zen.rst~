The Zen of Python, and some (personal) words on it
====================================================

If you type into your Python Interpretor the line
::

    import this

You will get this:

**The Zen of Python, by Tim Peters**

#. *Beautiful is better than ugly.*
#. *Explicit is better than implicit.*
#. *Simple is better than complex.*
#. *Complex is better than complicated.*
#. *Flat is better than nested.*
#. *Sparse is better than dense.*
#. *Readability counts.*
#. *Special cases aren't special enough to break the rules.*
#. *Although practicality beats purity.*
#. *Errors should never pass silently.*
#. *Unless explicitly silenced.*
#. *In the face of ambiguity, refuse the temptation to guess.*
#. *There should be one-- and preferably only one --obvious way to do it.*
#. *Although that way may not be obvious at first unless you're Dutch.*
#. *Now is better than never.*
#. *Although never is often better than *right* now.*
#. *If the implementation is hard to explain, it's a bad idea.*
#. *If the implementation is easy to explain, it may be a good idea.*
#. *Namespaces are one honking great idea -- let's do more of those!*

One can argue about some the points, e.g. point 13., but some words are really true, especially the statements of simpleness.
My professors in the basic programming and informatics lectures were all software devolopers, and often cursed programmers from scientific areas,
because of their complicated and often weird codes. I didn't understand their words that time, but since I'm working with libraries like
BLAS, LAPACK, ATLAS etc. I started to understand...  

It's true that the processes of software engeneering for "normal" applications and scientific computation are two different areas, but I realised in the recent
years that many people from the latter area seem to simply ignore **nearly all** basic concepts of software design and coding, and I don't know why.
Maybe it's ignorance, because many think they don't need that much programming again, or it's me because of my friends and education I have a different viewpoint on 
that things.

I want to use this section to give some important lectures to people, who aren't deep into programming, 
I learnt during the last 10 years since I'm started programming Visual Basic with 15.

Code is more often read than written
"""""""""""""""""""""""""""""""""""""""""""""""""
For every time code is written, it is read about 10 times, and
five times by yourself! If you write code use good and intuitive 
names of the variables you use, and make enough comments in your code.
One often writes code, and then have to look at it a month later, and if
you didn't a good work on naming and commenting, you will spend many ours 
on trying to understand what you have done that time. And remember: Its **your** time.
So don't do it unless you want to assure your employment.
And if you want to use short variables like *A* for a matrix make sure to mention 
that at the beginning of a function which uses these variables.
And rest assured: Using longer variable names don't cost performance.

Program design isn't a waste of time!
""""""""""""""""""""""""""""""""""""""""""""""""""""
Of course you don't need to design every snippet of code you do,
but at least take your time to think about the implementation, and
how you can eventually reuse it. Sometimes ten minutes of thinking
can save yourself ours of programming.

Premature optimisation is the rule of all evil!
"""""""""""""""""""""""""""""""""""""""""""""""""
This often cited quote of Donald E. Knuth [#]_ is true in it's very deep essence. In an everage program
there are about only 3% of critical code. But many programmers invest their time to optimise the
other 97% and wonder why their program isn't getting quicker. The only gain you get is a whole bunch
of unreadible code. I remember that I implemented an "optimized" for loop some time ago, and the only gain were
3 ms of more speed. And later when I looked on that function I had no Idea what I did that time... 

Use version control
"""""""""""""""""""""""""""""""""""""""""""""""""""
Many, many people simply don't know there are very nice
tools to keep record of your changes, and make it possible
to redo the changes like Git [#]_, Mercurial [#]_ (which is written in Python),
or SVN [#]_. 

Not everything from Extreme Programming is that bad
""""""""""""""""""""""""""""""""""""""""""""""""""""
It is shown in many tests that applying the whole concept of XP [#]_, simply 
doesn't work in practice.
However, done with some moderation the basic concepts of extreme programing can make 
the life of a programmer much easier. I personally use this modified subset of rules:

* The project is divided into iterations.
* Iteration planning starts each iteration.
* Pair programming (at least sometimes).
* Simplicity.
* Create spike solutions to reduce risk.
* All code must have unit tests.
* All code must pass all unit tests before it  can be released/integrated.
* When a bug is found tests are created.

If your programs aren't understandable nobody will use them
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
...including yourself.
 
Use your brain! 
""""""""""""""""""""""""""""""""
Implicitely used in all points above, this is the most fundamental thing.  
Never simply apply concepts or techniques without thinking about the consequences,
or if they are suited for your problems. And yes I include my guidelines here as well.
I met many programmers and software developers, which studied software design, and 
how to use design tools, but never really think about the basics. I also often hear
about totally awesome newly discovered concepts, which I use in my daily basis, because
I simply don't want to do unessecary work.

.. rubric:: Links

.. [#] http://en.wikiquote.org/wiki/Donald_Knuth
.. [#] http://git-scm.com/
.. [#] http://mercurial.selenic.com/
.. [#] http://en.wikipedia.org/wiki/Apache_Subversion
.. [#] http://www.extremeprogramming.org/

